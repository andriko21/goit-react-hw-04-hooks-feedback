{"version":3,"sources":["components/statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/statistics/Statistics.js","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","App.js","index.js"],"names":["module","exports","Statistics","title","good","neutral","bad","total","positivePercent","className","style","List","Item","Section","children","styles","defaultProps","FeedbackOptions","options","leaveFeedback","map","option","button","type","onClick","App","useState","setGood","setNeutral","setBad","countTotalFeedback","value","prevState","alert","totalCalc","toFixed","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,kBCAzDD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,iBCA7DD,EAAOC,QAAU,CAAC,OAAS,kC,qIC4BZC,EAxBI,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBACtD,OACE,qCACE,6BAAKL,IACL,qBAAIM,UAAWC,IAAMC,KAArB,UACE,qBAAIF,UAAWC,IAAME,KAArB,mBAAkCR,KAClC,qBAAIK,UAAWC,IAAME,KAArB,sBAAqCP,KACrC,qBAAII,UAAWC,IAAME,KAArB,kBAAiCN,KACjC,qBAAIG,UAAWC,IAAME,KAArB,oBAAmCL,KACnC,qBAAIE,UAAWC,IAAME,KAArB,gCAA+CJ,EAA/C,c,gBCXFK,EAAU,SAAC,GAAD,EAAGV,MAAH,IAAUW,EAAV,EAAUA,SAAV,OACd,0BAASL,UAAWM,IAAOF,QAA3B,UACE,oBAAIJ,UAAWM,IAAOZ,MAAtB,mCACCW,MAULD,EAAQG,aAAe,CACrBF,SAAU,KAGGD,Q,gBChBFI,EAAkB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cACzC,OACE,mCACGD,EAAQE,KAAI,SAACC,GACZ,OACE,wBACEZ,UAAWC,IAAMY,OAEjBC,KAAK,SACLC,QAAS,kBAAML,EAAcE,IAJ/B,SAMGA,GAJIA,SCiDFI,EAvDH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOtB,EAAP,KAAauB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOrB,EAAP,KAAgBuB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOpB,EAAP,KAAYuB,EAAZ,KAkBMC,EAAqB,SAAC1B,EAAMC,EAASC,GACzC,OAAOF,EAAOC,EAAUC,GAQ1B,OACE,eAAC,EAAD,CAASH,MAAM,wBAAf,UACE,cAAC,EAAD,CACEe,QAAS,CAAC,OAAQ,UAAW,OAC7BC,cA7Ba,SAACY,GAClB,OAAQA,GACN,IAAK,OACHJ,GAAQ,SAACK,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHJ,GAAW,SAACI,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHH,GAAO,SAACG,GAAD,OAAeA,EAAY,KAClC,MACF,QACEC,MAAM,aAmBoC,IAA3CH,EAAmB1B,EAAMC,EAASC,GACjC,kDAEA,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuB,EAAmB1B,EAAMC,EAASC,GACzCE,gBAnBgC,SAACJ,EAAMC,EAASC,GACtD,IAAM4B,EAAY9B,EAAOC,EAAUC,EACnC,OAAsB,IAAd4B,EAAkB,EAAK9B,EAAO8B,EAAa,KAAKC,UAiBjCC,CACfhC,EACAC,EACAC,SC/CZ+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.56d2de3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"Statistics_List__3nAxf\",\"Item\":\"Statistics_Item__2IJ2P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__1SQig\",\"title\":\"Section_title__2So1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1mhUT\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"../statistics/Statistics.module.css\";\r\n\r\n\r\nconst Statistics = ({ title, good, neutral, bad, total, positivePercent }) => {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      <ul className={style.List}>\r\n        <li className={style.Item}>Good: {good}</li>\r\n        <li className={style.Item}>Neutral: {neutral}</li>\r\n        <li className={style.Item}>Bad: {bad}</li>\r\n        <li className={style.Item}>Total: {total}</li>\r\n        <li className={style.Item}>Positive feedback: {positivePercent}%</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  title: PropTypes.string,\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercent: PropTypes.string,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../Section/Section.module.css\";\r\nconst Section = ({ title, children }) => (\r\n  <section className={styles.Section}>\r\n    <h1 className={styles.title}>Please leave feedback</h1>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n\r\n  //  children: PropTypes.object,\r\n};\r\n\r\nSection.defaultProps = {\r\n  children: \" \",\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n// import PropTypes from 'prop-types'\r\nimport style from \"../FeedbackOptions/FeedbackOptions.module.css\";\r\n\r\nexport const FeedbackOptions = ({ options, leaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {options.map((option) => {\r\n        return (\r\n          <button\r\n            className={style.button}\r\n            key={option}\r\n            type=\"button\"\r\n            onClick={() => leaveFeedback(option)}\r\n          >\r\n            {option}\r\n          </button>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\n// export default FeedbackOptions;\r\n\r\n// export class FeedbackOptions extends Component {\r\n//    options = this.props.options;\r\n//     leaveFeedback = this.props.leaveFeedback;\r\n//      render() {\r\n//     return (\r\n//       <>\r\n//             {this.options.map(option => {\r\n//           return (\r\n//             <button\r\n//               className={style.button}\r\n//               key={option}\r\n//               type=\"button\"\r\n//               onClick={() => this.leaveFeedback(option)}\r\n//             >\r\n//               {option}\r\n//             </button>\r\n//           );\r\n//         })}\r\n//       </>\r\n//     )\r\n//   }\r\n// }\r\n","import React, { useState } from \"react\";\nimport Statistics from \"./components/statistics/Statistics.js\";\nimport Section from \"./components/Section/Section.js\";\nimport { FeedbackOptions } from \"./components/FeedbackOptions/FeedbackOptions.js\";\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onBtnClick = (value) => {\n    switch (value) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        alert(\"error\");\n    }\n  };\n\n  const countTotalFeedback = (good, neutral, bad) => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = (good, neutral, bad) => {\n    const totalCalc = good + neutral + bad;\n    return (totalCalc === 0 ? 0 : (good / totalCalc) * 100).toFixed();\n  };\n\n  return (\n    <Section title=\"Please leave feedback\">\n      <FeedbackOptions\n        options={[\"good\", \"neutral\", \"bad\"]}\n        leaveFeedback={onBtnClick}\n      />\n      {countTotalFeedback(good, neutral, bad) === 0 ? (\n        <p>No feedback given</p>\n      ) : (\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback(good, neutral, bad)}\n          positivePercent={countPositiveFeedbackPercentage(\n            good,\n            neutral,\n            bad\n          )}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default App;\n\n// export default class App extends Component {\n//   static defaultProps = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   }\n//   state = {\n//     good: this.props.good,\n//     neutral: this.props.neutral,\n//     bad: this.props.bad,\n//   };\n\n//   onBtnClick = (value) => {\n//     this.setState((currentState) => {\n//       return {\n//         [value]: currentState[value] + 1,\n//       };\n//     });\n//   };\n\n// countTotalFeedback = (good, neutral, bad) => {\n//   return good + neutral + bad;\n// };\n\n//   countPositiveFeedbackPercentage = (good, neutral, bad) => {\n//     const totalCalc = good + neutral + bad;\n//     return (totalCalc === 0 ? 0 : (good / totalCalc) * 100).toFixed();\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     return (\n// <Section title=\"Please leave feedback\">\n//   <FeedbackOptions\n//     options={[\"good\", \"neutral\", \"bad\"]}\n//     leaveFeedback={this.onBtnClick}\n//   />\n//   {this.countTotalFeedback(good,neutral,bad) === 0 ? <p>No feedback given</p> :\n//   <Statistics\n//     good={good}\n//     neutral={neutral}\n//     bad={bad}\n//     total={this.countTotalFeedback(good, neutral, bad)}\n//     positivePercent={this.countPositiveFeedbackPercentage(\n//       good,\n//       neutral,\n//       bad\n//     )}\n//   />}\n// </Section>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}